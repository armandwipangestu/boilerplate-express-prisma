// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @unique @default(uuid())
  user_id Int      @id @default(autoincrement())
  email   String   @unique
  name    String
  role    Role?    @default(USER)
  Profile Profile?
  Post    Post[]

  @@map("users")
}

model Profile {
  id         String @unique @default(uuid())
  profile_id Int    @id @default(autoincrement())
  bio        String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [user_id])

  @@map("profiles")
}

model Post {
  id        String   @unique @default(uuid())
  post_id   Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)

  authorId Int
  author   User @relation(fields: [authorId], references: [user_id])

  CategorysOnPost CategorysOnPost[]

  @@map("posts")
}

model CategorysOnPost {
  postId Int
  post   Post @relation(fields: [postId], references: [post_id])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [category_id])

  @@id([postId, categoryId])
  @@map("_CategorysOnPost")
}

model Category {
  id          String @unique @default(uuid())
  category_id Int    @id @default(autoincrement())
  name        String

  CategorysOnPost CategorysOnPost[]

  @@map("categorys")
}

enum Role {
  USER
  ADMIN
}
